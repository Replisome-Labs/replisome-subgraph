type Account @entity {
  id: Bytes!
  artworkBalances: [ArtworkBalance!]! @derivedFrom(field: "account")
  artworkOperatorOwner: [ArtworkOperator!]! @derivedFrom(field: "owner")
  artworkOperatorOperator: [ArtworkOperator!]! @derivedFrom(field: "operator")
  artworkTransferFromEvent: [ArtworkTransfer!]! @derivedFrom(field: "from")
  artworkTransferToEvent: [ArtworkTransfer!]! @derivedFrom(field: "to")
  artworkTransferOperatorEvent: [ArtworkTransfer!]!
    @derivedFrom(field: "operator")
  copyrightTokens: [CopyrightToken!]! @derivedFrom(field: "owner")
  copyrightOperatorOwner: [CopyrightOperator!]! @derivedFrom(field: "owner")
  copyrightOperatorOperator: [CopyrightOperator!]!
    @derivedFrom(field: "operator")
  copyrightTransferFromEvent: [CopyrightTransfer!]! @derivedFrom(field: "from")
  copyrightTransferToEvent: [CopyrightTransfer!]! @derivedFrom(field: "to")
  royaltyReceived: [RoyaltyTransfer!]! @derivedFrom(field: "to")
  royaltyPaid: [RoyaltyTransfer!]! @derivedFrom(field: "from")
  events: [Event!]! @derivedFrom(field: "emitter")
}

type ArtworkContract @entity(immutable: true) {
  id: Bytes!
  tokens: [ArtworkToken!]! @derivedFrom(field: "contract")
  balances: [ArtworkBalance!]! @derivedFrom(field: "contract")
  operators: [ArtworkOperator!]! @derivedFrom(field: "contract")
  transfers: [ArtworkTransfer!]! @derivedFrom(field: "contract")
}

type ArtworkToken @entity {
  id: ID!
  contract: ArtworkContract!
  identifier: BigInt!
  uri: String!
  copyright: CopyrightToken!
  totalSupply: BigInt!
  ownedSupply: BigInt!
  usedSupply: BigInt!
  balances: [ArtworkBalance!]! @derivedFrom(field: "token")
  transfers: [ArtworkTransfer!]! @derivedFrom(field: "token")
}

type ArtworkBalance @entity {
  id: ID!
  contract: ArtworkContract!
  token: ArtworkToken!
  account: Account!
  value: BigInt!
  ownedValue: BigInt!
  usedValue: BigInt!
  transferFromEvent: [ArtworkTransfer!]! @derivedFrom(field: "fromBalance")
  transferToEvent: [ArtworkTransfer!]! @derivedFrom(field: "toBalance")
}

type ArtworkOperator @entity {
  id: ID!
  contract: ArtworkContract!
  owner: Account!
  operator: Account!
  approved: Boolean!
}

type ArtworkTransfer implements Event @entity(immutable: true) {
  id: ID!
  contract: ArtworkContract!
  token: ArtworkToken!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  operator: Account!
  from: Account
  fromBalance: ArtworkBalance
  to: Account
  toBalance: ArtworkBalance
  value: BigInt!
}

type CopyrightContract @entity {
  id: Bytes!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  tokens: [CopyrightToken!]! @derivedFrom(field: "contract")
  operators: [CopyrightOperator!]! @derivedFrom(field: "contract")
  transfers: [CopyrightTransfer!]! @derivedFrom(field: "contract")
}

type CopyrightToken @entity {
  id: ID!
  contract: CopyrightContract!
  identifier: BigInt!
  uri: String!
  artwork: ArtworkToken!
  metadata: MetadataInfo!
  ruleset: Ruleset!
  creator: Account!
  owner: Account!
  approval: Account!
  provananceFrom: [CopyrightProvanance!]! @derivedFrom(field: "toToken")
  provananceTo: [CopyrightProvanance!]! @derivedFrom(field: "fromToken")
  transfers: [CopyrightTransfer!]! @derivedFrom(field: "token")
}

type CopyrightProvanance @entity(immutable: true) {
  id: ID!
  fromToken: CopyrightToken!
  toToken: CopyrightToken!
  amount: BigInt!
}

type CopyrightOperator @entity {
  id: ID!
  contract: CopyrightContract!
  owner: Account!
  operator: Account!
  approved: Boolean!
}

type CopyrightTransfer implements Event @entity(immutable: true) {
  id: ID!
  emitter: Account!
  transaction: Transaction!
  timestamp: BigInt!
  contract: CopyrightContract!
  token: CopyrightToken!
  from: Account!
  to: Account!
}

type MetadataContract @entity {
  id: Bytes!
  isRegistered: Boolean!
  totalSupply: BigInt!
}

type MetadataInfo @entity(immutable: true) {
  id: ID!
  contract: MetadataContract!
  identifier: BigInt!
  copyright: CopyrightToken
  width: BigInt!
  height: BigInt!
  colors: [String!]!
  data: Bytes!
  svg: String!
  raw: Bytes!
  ingredients: [MetadataIngredient!] @derivedFrom(field: "metadata")
}

type MetadataIngredient @entity(immutable: true) {
  id: ID!
  metadata: MetadataInfo!
  token: CopyrightToken!
  amount: BigInt!
}

type Ruleset @entity(immutable: true) {
  id: Bytes!
  isUpgradable: Boolean!
}

type RoyaltyTransfer implements Event @entity(immutable: true) {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
  from: Account!
  to: Account!
  token: ERC20Contract!
  value: BigInt!
  action: Action!
}

type ERC20Contract @entity(immutable: true) {
  id: Bytes!
  name: String
  symbol: String
  decimals: Int!
}

type Configurator @entity {
  id: Bytes!
  owner: Account!
  treatury: Account!
  copyrightRenderer: Bytes!
  feeToken: Bytes!
  feeFormulas: [FeeFormula!]! @derivedFrom(field: "configurator")
}

type FeeFormula @entity {
  id: ID!
  configurator: Configurator!
  action: Action!
  value: Bytes!
}

enum Action {
  CopyrightClaim
  CopyrightWaive
  CopyrightSale
  ArtworkCopy
  ArtworkBurn
  ArtworkUtilize
}

interface Event {
  id: ID!
  transaction: Transaction!
  emitter: Account!
  timestamp: BigInt!
}

type Transaction @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}
